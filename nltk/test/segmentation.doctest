.. Copyright (C) 2001-2012 NLTK Project
.. For license information, see LICENSE.TXT

=======
Segmentation Metrics
=======

The `nltk.metrics.segmentation` package provides a variety of
*evaluation measures* which can be used for evaluating text
segmentation methods

    >>> from nltk.metrics.segmentation import *
    >>> from nltk.metrics.segmentation.ghd import *
    >>> from nltk.metrics.segmentation.pk import *
    >>> from nltk.test.doctest_utils import *

------------------
Generalized Hamming Distance
------------------

Generalized Hamming Distance may be used as an evaluation metric
for text segmentation. It compares two segmentation, and return
an estimation of the cost to transform a segmentation into another.
The transformation is done though boundary insertions, deletions and shift.
Each of these operation has a different cost that should be passed to the function.
Segmentations are represented using strings of 0 and 1, 1 being a boundary.

    >>> float_equal(ghd('1100100000', '1100010000', 1.0, 1.0, 0.5), .5)
    True
    >>> float_equal(ghd('1100100000', '1100000001', 1.0, 1.0, 0.5), 2)
    True
    >>> float_equal(ghd('011', '110', 1.0, 1.0, 0.5), 1)
    True
    >>> float_equal(ghd('1', '0', 1.0, 1.0, 0.5), 1)
    True
    >>> float_equal(ghd('111', '000', 1.0, 1.0, 0.5), 3)
    True
    >>> float_equal(ghd('000', '111', 1.0, 2.0, 0.5), 6)
    True


------------------
Befferman's Pk
------------------

Beeferman's Pk was proposed as an evaluation metric
for text segmentation. It takes a reference segmentation as first argument,
an hypothesis segmentation as second argument.
It returns the propability that randomly chosen
pair of words a distance of k words is inconsistently classified
Segmentations are represented using strings of 0 and 1, 1 being a boundary.

    >>> float_equal(pk('1000100', '1000100', 3), 0)
    True
    >>> float_equal(pk('100', '010', 2), .5)
    True
    >>> float_equal(pk('100100', '111111', 2), .64)
    True
    >>> float_equal(pk('100100', '000000', 2), .04)
    True
    >>> float_equal(pk('100100', '111111', 3), .25)
    True
    >>> float_equal(pk('100100', '000000', 3), .25)
    True
